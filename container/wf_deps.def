Bootstrap: docker
From: ubuntu:22.04
	
%files
	#./jaffal_reference_data

%environment
    export mamba_prefix="/opt/mamba"
    export PATH="${mamba_prefix}/bin:$PATH"
    export PATH="$PATH:/WFTDeps/samtools-1.12"
    export PATH="/WFTDeps/salmon-1.10.1/bin:$PATH"
    export LD_LIBRARY_PATH="/WFTDeps/salmon-1.10.1/lib:$LD_LIBRARY_PATH"
    export PATH="/WFTDeps/julia/bin:$PATH"
    export JULIA_LOAD_PATH="/WFTDeps/julia/packages:$JULIA_LOAD_PATH"
    export JULIA_DEPOT_PATH="/WFTDeps/julia/packages:$JULIA_DEPOT_PATH"
	
%post
	export DEBIAN_FRONTEND=noninteractive
	apt-get update -y
	apt-get upgrade -y
	apt-get install -y wget git curl \
                       zip unzip \
                       zlib1g-dev libncurses-dev libbz2-dev liblzma-dev \
                       libxml2-dev libssl-dev \
                       libcurl4-openssl-dev libboost-all-dev\
                       autotools-dev autoconf \
                       software-properties-common \
                       build-essential cmake
	apt-get update -y
    
    mkdir /WFTDeps
    mkdir /install_dependencies
    
    apt-get install -y stringtie
    
    # Install Mamba
    # contrary to the singularity 3.9 documentation, environment variables set in
    # the %environment section are not available in the %post section and need to be set manually
    cd /install_dependencies
    readonly mamba_version="23.11.0-0"
    readonly mamba_installer="Mambaforge-${mamba_version}-$(uname)-$(uname -m).sh"
    readonly mamba_prefix="/opt/mamba"
    wget "https://github.com/conda-forge/miniforge/releases/download/${mamba_version}/${mamba_installer}"
    sh "${mamba_installer}" -b -p "${mamba_prefix}"
    rm "${mamba_installer}"
    export PATH="${mamba_prefix}/bin:$PATH"

    PATH=$PATH:/bbmap/
    mamba config --add channels defaults
    mamba config --add channels conda-forge
    mamba config --add channels bioconda

    mamba init
    
    mamba install -y -c bioconda pysam aplanat pandas
    mamba install -y -c nanoporetech -c conda-forge -c bioconda "nanoporetech::pychopper"
    mamba install -y scikit-learn pyarrow

    # API change from bokeh in aplanat ("Figure" renamed to "figure")
    sed -i "/from bokeh.plotting import Figure/c\from bokeh.plotting import figure as Figure" "/opt/mamba/lib/python3.10/site-packages/aplanat/__init__.py"
    
    cd /install_dependencies
    wget https://github.com/samtools/htslib/releases/download/1.9/htslib-1.9.tar.bz2
    tar -xjf htslib-1.9.tar.bz2
    cd htslib-1.9
    make
    cd ..
    cp -r htslib-1.9 /usr/bin
    
    cd /install_dependencies
    git clone https://github.com/lh3/minimap2
    cd minimap2
    make
    cp ./minimap2 /usr/local/bin/
    
    #cd /install_dependencies
    #git clone https://github.com/gpertea/stringtie
    #cd stringtie
    #make release
    #cp ./gffread /usr/local/bin/
    #cd /install_dependencies
    
    cd /install_dependencies
    git clone https://github.com/gpertea/gffread
    cd gffread
    make release
    cp ./gffread /usr/local/bin/
    
    
    cd /install_dependencies
    wget "https://github.com/shenwei356/seqkit/releases/download/v2.6.1/seqkit_linux_amd64.tar.gz"
    tar -xzf "seqkit_linux_amd64.tar.gz"
    cp seqkit /usr/local/bin/
    
    cd /install_dependencies
    wget "http://ccb.jhu.edu/software/stringtie/dl/gffcompare-0.12.6.Linux_x86_64.tar.gz"
    tar -xzf "gffcompare-0.12.6.Linux_x86_64.tar.gz"
    cd "gffcompare-0.12.6.Linux_x86_64"
    cp ./gffcompare /usr/local/bin/
    
    cd /install_dependencies
    wget "https://github.com/arq5x/bedtools2/releases/download/v2.31.1/bedtools-2.31.1.tar.gz"
    tar -xzf "bedtools-2.31.1.tar.gz"
    cd "bedtools2"
    make
    cp ./bin/bedtools /usr/local/bin
    
    cd /install_dependencies
    wget "https://github.com/samtools/samtools/releases/download/1.12/samtools-1.12.tar.bz2"
    tar -xjf samtools-1.12.tar.bz2
    cd samtools-1.12/
    ./configure
    make
    make install
    cd /install_dependencies
    mv /install_dependencies/samtools-1.12 /WFTDeps/samtools-1.12
    export PATH="$PATH:/WFTDeps/samtools-1.12"
    echo 'export PATH="$PATH:/WFTDeps/samtools-1.12"' >> ~/.bashrc
    
    # installing JAFFAL can be done from the git repository JAFFA
    # it requires working installations of R and Java11 and fixing a shell incompatibility
    # also, JAFFAL needs to operate inside a directory with reference genomes (â‰ˆ7.5GB for humans)
    
    # install R
    apt-get install -y r-base r-base-dev
    # installing Java11 requires an outside repository
    add-apt-repository ppa:openjdk-r/ppa
    apt-get update -y
    apt install -y openjdk-11-jdk
    
    #install R libraries
    R -e "install.packages('dplyr')"
    R -e "install.packages('BiocManager')"
    R -e "BiocManager::install('DRIMSeq')"
    chmod +r /usr/local/lib/R
    R -e "BiocManager::install('GenomicFeatures')"
    R -e "BiocManager::install('edgeR')"
    R -e "BiocManager::install('stageR')"
    R -e "BiocManager::install('DEXSeq')"
    
    cd /install_dependencies
    #git clone https://github.com/Oshlack/JAFFA/releases/download/version-2.3/JAFFA-version-2.3.tar.gz
    wget "https://github.com/Oshlack/JAFFA/releases/download/version-2.3/JAFFA-version-2.3.tar.gz"
    tar -xzf JAFFA-version-2.3.tar.gz
    cd JAFFA-version-2.3
    # fixing a ';'-separated double line
    sed -i "/tar -xvf minimap2-2.17_x64-linux.tar.bz2 ; rm minimap2-2.17_x64-linux.tar.bz2/c\   tar -xvf minimap2-2.17_x64-linux.tar.bz2\n   rm minimap2-2.17_x64-linux.tar.bz2" "./install_linux64.sh"
    bash install_linux64.sh
    cd /install_dependencies
    mv /install_dependencies/JAFFA-version-2.3 /WFTDeps/JAFFA-version-2.3
    
    #TODO: run JAFFL once in order to download dependencies
    
    cd /install_dependencies
    wget "https://github.com/COMBINE-lab/salmon/archive/refs/tags/v1.10.1.tar.gz"
    tar -xzf v1.10.1.tar.gz
    cd salmon-1.10.1
    mkdir build
    cd build
    #cmake -DFETCH_BOOST=TRUE whereis boost
    cmake -DBOOST_ROOT="$(whereis boost)" ./..
    make
    make install
    cd ..
    cp bin/salmon /usr/local/bin
    cd /install_dependencies
    mv /install_dependencies/salmon-1.10.1 /WFTDeps/salmon-1.10.1
    #export PATH="/WFTDeps/salmon-1.10.1/bin:$PATH"
    #export LD_LIBRARY_PATH="/WFTDeps/salmon-1.10.1/lib:$LD_LIBRARY_PATH
    
    # install julia and packages
    cd /install_dependencies
    wget "https://julialang-s3.julialang.org/bin/linux/x64/1.10/julia-1.10.1-linux-x86_64.tar.gz"
    tar -xzf julia-1.10.1-linux-x86_64.tar.gz
    mv /install_dependencies/julia-1.10.1 /WFTDeps/julia
    mkdir /WFTDeps/julia/packages
    export JULIA_LOAD_PATH="/WFTDeps/julia/packages:$JULIA_LOAD_PATH"
    export JULIA_DEPOT_PATH="/WFTDeps/julia/packages:$JULIA_DEPOT_PATH"
    export PATH="/WFTDeps/julia/bin:$PATH"
    /WFTDeps/julia/bin/julia -e 'using Pkg; Pkg.add(["CSV", "DataFrames", "JSON"])'
    /WFTDeps/julia/bin/julia -e 'import Pkg; Pkg.status()'
    
    #apt-get remove -y wget git curl zip unzip build-essential cmake \
    #                  autotools-dev autoconf && \
    #apt-get autoremove && \
    rm -r /install_dependencies

%runscript
	
%startscript
	
%test
	echo "test minimap2 version: $(minimap2 --version)"
	echo "test gffcompare version: $(gffcompare --version)"
	echo "test stringtie version: $(stringtie --version)"
    echo "test seqkit version: $(seqkit version)"
    echo "test gffread version: $(gffread --version)"
    echo "test bedtools version: $(bedtools --version)"
    echo "test samtools version: $(samtools --version)"
    echo "test JAFFAL location: $(ls /WFTDeps/JAFFA-version-2.3 | grep JAFFA)"
	# test R
	echo "test R version: $(R --version)"
    # test python packages
    echo "test python version: $(python --version)"
    echo "test pysam version: $(python -c "import pysam; print(f'pysam,{pysam.__version__}')")"
    echo "test aplanat version: $(python -c "import aplanat; print(f'aplanat,{aplanat.__version__}')")"
    echo "test pandas version: $(python -c "import pandas; print(f'pandas,{pandas.__version__}')")"
    echo "test sklearn version: $(python -c "import sklearn; print(f'scikit-learn,{sklearn.__version__}')")"
    echo "test pychopper version: $(python -c "import pychopper; print(f'pychopper,{pychopper.__version__}')")"
    # test julia packages
    echo "test julia version: $(julia --version)"
    echo "test julia packages: $(julia -e 'import Pkg; Pkg.status()')"
    
%labels
	Author ny298
	Version v0.0.1

%help
    This is a SIngularity container with several bioinformatics tools preinstalled. It is possible to run the epi2me workflow "wf_transcriptome" with this singularity container.
    For that you should bind a directory for data e.g. at /mnt/data and optionally a script directory at e.g. /mnt/scripts during a singularity shell session and manually invoke a script that performs equivalent tasks.


